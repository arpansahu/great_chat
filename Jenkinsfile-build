pipeline {
    agent any
    environment {
        REGISTRY = "harbor.arpansahu.me"
        REPOSITORY = "library/great_chat"
        IMAGE_TAG = "${env.BUILD_ID}"
        COMMIT_FILE = "${env.WORKSPACE}/last_commit.txt"
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Check for Changes') {
            steps {
                script {
                    // Get the current commit hash
                    def currentCommit = sh(script: "git rev-parse HEAD", returnStdout: true).trim()
                    echo "Current commit: ${currentCommit}"

                    // Check if the last commit file exists
                    if (fileExists(COMMIT_FILE)) {
                        def lastCommit = readFile(COMMIT_FILE).trim()
                        echo "Last commit: ${lastCommit}"

                        // Compare the current commit with the last commit
                        if (currentCommit == lastCommit) {
                            echo "No changes detected. Skipping build."
                            currentBuild.result = 'NOT_BUILT'
                            error("No changes detected. Skipping build.")
                        } else {
                            // Check for changes in relevant files
                            def changes = sh(script: "git diff --name-only ${lastCommit} ${currentCommit}", returnStdout: true).trim().split("\n")
                            def relevantChanges = changes.findAll { 
                                !(it in ['README.md', 'SECURITY.md', 'CHANGELOG.md', '.github/dependabot.yml'])
                            }
                            
                            if (relevantChanges.isEmpty()) {
                                echo "No relevant changes detected. Skipping build."
                                currentBuild.result = 'NOT_BUILT'
                                error("No relevant changes detected. Skipping build.")
                            } else {
                                echo "Relevant changes detected. Proceeding with build."
                            }
                        }
                    } else {
                        echo "No last commit file found. Proceeding with initial build."
                    }

                    // Save the current commit hash to the file
                    writeFile(file: COMMIT_FILE, text: currentCommit)
                }
            }
        }
        stage('Dependencies') {
            when {
                not {
                    environment name: 'BUILD_STATUS', value: 'NOT_BUILT'
                }
            }
            steps {
                script {
                    // Copy .env file to the workspace
                    sh "sudo cp /root/projectenvs/great_chat/.env ${env.WORKSPACE}/"
                }
            }
        }
        stage('Build Image') {
            when {
                not {
                    environment name: 'BUILD_STATUS', value: 'NOT_BUILT'
                }
            }
            steps {
                script {
                    // Ensure Docker is running and can be accessed
                    sh 'docker --version'
                    
                    // Log the image details
                    echo "Building Docker image: ${REGISTRY}/${REPOSITORY}:${IMAGE_TAG}"
                    
                    // Build the Docker image
                    sh """
                    docker build -t ${REGISTRY}/${REPOSITORY}:${IMAGE_TAG} .
                    docker tag ${REGISTRY}/${REPOSITORY}:${IMAGE_TAG} ${REGISTRY}/${REPOSITORY}:latest
                    """
                }
            }
        }
        stage('Push Image') {
            when {
                not {
                    environment name: 'BUILD_STATUS', value: 'NOT_BUILT'
                }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'harbor-credentials', passwordVariable: 'DOCKER_REGISTRY_PASSWORD', usernameVariable: 'DOCKER_REGISTRY_USERNAME')]) {
                    script {
                        // Log in to Docker registry using environment variables without direct interpolation
                        sh '''
                        echo $DOCKER_REGISTRY_PASSWORD | docker login ${REGISTRY} -u $DOCKER_REGISTRY_USERNAME --password-stdin
                        '''
                        
                        // Push the Docker image to the registry
                        sh '''
                        docker push ${REGISTRY}/${REPOSITORY}:${IMAGE_TAG}
                        docker push ${REGISTRY}/${REPOSITORY}:latest
                        '''
                    }
                }
            }
        }
    }
    post {
        success {
            script {
                currentBuild.description = "Image: ${REGISTRY}/${REPOSITORY}:${IMAGE_TAG}"
                
                // Send success notification email
                sh """curl -s \
                -X POST \
                --user $MAIL_JET_API_KEY:$MAIL_JET_API_SECRET \
                https://api.mailjet.com/v3.1/send \
                -H "Content-Type:application/json" \
                -d '{
                    "Messages":[
                            {
                                    "From": {
                                            "Email": "$MAIL_JET_EMAIL_ADDRESS",
                                            "Name": "ArpanSahuOne Jenkins Notification"
                                    },
                                    "To": [
                                            {
                                                    "Email": "$MY_EMAIL_ADDRESS",
                                                    "Name": "Development Team"
                                            }
                                    ],
                                    "Subject": "${currentBuild.fullDisplayName} built successfully",
                                    "TextPart": "Hola Development Team, your project ${currentBuild.fullDisplayName} is now built and pushed to the registry",
                                    "HTMLPart": "<h3>Hola Development Team, your project ${currentBuild.fullDisplayName} is now built and pushed to the registry </h3> <br> <p> Build Url: ${env.BUILD_URL}  </p>"
                            }
                    ]
                }'"""

                // Trigger great_chat job only if the build is stable
                build job: 'great_chat', wait: false
            }
        }
        failure {
            script {
                // Send failure notification email
                sh """curl -s \
                -X POST \
                --user $MAIL_JET_API_KEY:$MAIL_JET_API_SECRET \
                https://api.mailjet.com/v3.1/send \
                -H "Content-Type:application/json" \
                -d '{
                    "Messages":[
                            {
                                    "From": {
                                            "Email": "$MAIL_JET_EMAIL_ADDRESS",
                                            "Name": "ArpanSahuOne Jenkins Notification"
                                    },
                                    "To": [
                                            {
                                                    "Email": "$MY_EMAIL_ADDRESS",
                                                    "Name": "Development Team"
                                            }
                                    ],
                                    "Subject": "${currentBuild.fullDisplayName} build failed",
                                    "TextPart": "Hola Development Team, your project ${currentBuild.fullDisplayName} build failed",
                                    "HTMLPart": "<h3>Hola Development Team, your project ${currentBuild.fullDisplayName} build failed </h3> <br> <p> Build Url: ${env.BUILD_URL}  </p>"
                            }
                    ]
                }'"""
            }
        }
    }
}