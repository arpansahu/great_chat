pipeline {
    agent { label 'local' }
    parameters {
        booleanParam(name: 'skip_checks', defaultValue: false, description: 'Skip the Check for Changes stage')
        choice(name: 'DEPLOY_TYPE', choices: ['kubernetes', 'docker'], description: 'Select deployment type')
    }
    environment {
        REGISTRY = "harbor.arpansahu.me"
        REPOSITORY = "library/great_chat"
        IMAGE_TAG = "latest"  // or use a specific tag if needed
    }
    stages {
        stage('Initialize') {
            steps {
                script {
                    echo "Current workspace path is: ${env.WORKSPACE}"
                }
            }
        }
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Check for New Image') {
            when {
                expression { !params.skip_checks }
            }
            steps {
                script {
                    // Get the ImageID of the currently running container
                    def currentImageID = sh(script: "docker inspect -f '{{.Image}}' great_chat || echo 'none'", returnStdout: true).trim()
                    echo "Current image ID: ${currentImageID}"

                    // Pull the latest image to get its ImageID
                    sh "docker pull ${REGISTRY}/${REPOSITORY}:${IMAGE_TAG}"
                    def latestImageID = sh(script: "docker inspect -f '{{.Id}}' ${REGISTRY}/${REPOSITORY}:${IMAGE_TAG}", returnStdout: true).trim()
                    echo "Latest image ID: ${latestImageID}"

                    // Check if the ImageIDs are different
                    if (currentImageID != latestImageID) {
                        env.NEW_IMAGE_AVAILABLE = 'true'
                        echo "New image available, proceeding with deployment."
                    } else {
                        env.NEW_IMAGE_AVAILABLE = 'false'
                        echo "No new image available, skipping deployment."
                    }
                }
            }
        }
        stage('Deploy') {
            when {
                expression {
                    return params.skip_checks || env.NEW_IMAGE_AVAILABLE == 'true'
                }
            }
            steps {
                script {
                    if (params.DEPLOY_TYPE == 'docker') {
                        // Ensure the correct image tag is used in the docker-compose.yml
                        sh '''
                        sed -i "s|image: .*|image: ${REGISTRY}/${REPOSITORY}:${IMAGE_TAG}|" docker-compose.yml
                        '''
                        // Deploy using Docker Compose
                        sh 'docker-compose down'
                        sh 'docker-compose up -d'
                    } else if (params.DEPLOY_TYPE == 'kubernetes') {
                        // Copy the .env file to the workspace
                        sh "sudo cp /root/projectenvs/great_chat/.env ${env.WORKSPACE}/"

                        // Deploy to Kubernetes
                        sh '''
                        kubectl create secret generic great-chat-secret --from-env-file=${env.WORKSPACE}/.env
                        kubectl apply -f deployment.yaml
                        kubectl apply -f service.yaml
                        '''
                    }
                    currentBuild.description = 'DEPLOYMENT_EXECUTED'
                }
            }
        }
    }
    post {
        success {
            script {
                if (currentBuild.description == 'DEPLOYMENT_EXECUTED') {
                    sh '''
                    curl -s -X POST --user $MAIL_JET_API_KEY:$MAIL_JET_API_SECRET https://api.mailjet.com/v3.1/send -H "Content-Type:application/json" -d '{
                        "Messages":[
                            {
                                "From": {
                                    "Email": "$MAIL_JET_EMAIL_ADDRESS",
                                    "Name": "ArpanSahuOne Jenkins Notification"
                                },
                                "To": [
                                    {
                                        "Email": "$MY_EMAIL_ADDRESS",
                                        "Name": "Development Team"
                                    }
                                ],
                                "Subject": "${currentBuild.fullDisplayName} deployed successfully",
                                "TextPart": "Hola Development Team, your project ${currentBuild.fullDisplayName} is now deployed",
                                "HTMLPart": "<h3>Hola Development Team, your project ${currentBuild.fullDisplayName} is now deployed </h3> <br> <p> Build Url: ${env.BUILD_URL}  </p>"
                            }
                        ]
                    }'
                    '''
                }
                // Trigger the common_readme job on success
                build job: 'common_readme', parameters: [string(name: 'project_git_url', value: 'https://github.com/arpansahu/great_chat'), string(name: 'environment', value: 'prod')], wait: false
            }
        }
        failure {
            script {
                // Send deployment failure notification
                sh '''
                curl -s -X POST --user $MAIL_JET_API_KEY:$MAIL_JET_API_SECRET https://api.mailjet.com/v3.1/send -H "Content-Type:application/json" -d '{
                    "Messages":[
                        {
                            "From": {
                                "Email": "$MAIL_JET_EMAIL_ADDRESS",
                                "Name": "ArpanSahuOne Jenkins Notification"
                            },
                            "To": [
                                {
                                    "Email": "$MY_EMAIL_ADDRESS",
                                    "Name": "Development Team"
                                }
                            ],
                            "Subject": "${currentBuild.fullDisplayName} deployment failed",
                            "TextPart": "Hola Development Team, your project ${currentBuild.fullDisplayName} deployment failed",
                            "HTMLPart": "<h3>Hola Development Team, your project ${currentBuild.fullDisplayName} is not deployed, Build Failed </h3> <br> <p> Build Url: ${env.BUILD_URL}  </p>"
                        }
                    ]
                }'
                '''
            }
        }
    }
}