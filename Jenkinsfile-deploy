pipeline {
    agent { label 'local' }
    parameters {
        booleanParam(name: 'skip_checks', defaultValue: true, description: 'Skip the Check for Changes stage')
        choice(name: 'DEPLOY_TYPE', choices: ['docker', 'kubernetes'], description: 'Select deployment type')
    }
    environment {
        REGISTRY = "harbor.arpansahu.me"
        REPOSITORY = "library/great_chat"
        IMAGE_TAG = "latest"  // or use a specific tag if needed
        KUBECONFIG = "${env.WORKSPACE}/kubeconfig"  // Set the KUBECONFIG environment variable
        NGINX_CONF = "/etc/nginx/sites-available/great-chat"
    }
    stages {
        stage('Initialize') {
            steps {
                script {
                    echo "Current workspace path is: ${env.WORKSPACE}"
                }
            }
        }
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Setup Kubernetes Config') {
            when {
                expression { return params.DEPLOY_TYPE == 'kubernetes' }
            }
            steps {
                script {
                    // Copy the kubeconfig file to the workspace
                    sh "sudo cp /root/.kube/config ${env.WORKSPACE}/kubeconfig"
                    // Change permissions of the kubeconfig file
                    sh "sudo chmod 644 ${env.WORKSPACE}/kubeconfig"
                }
            }
        }
        stage('Check for New Image') {
            when {
                expression { !params.skip_checks }
            }
            steps {
                script {
                    // Get the ImageID of the currently running container
                    def currentImageID = sh(script: "docker inspect -f '{{.Image}}' great_chat || echo 'none'", returnStdout: true).trim()
                    echo "Current image ID: ${currentImageID}"

                    // Pull the latest image to get its ImageID
                    sh "docker pull ${REGISTRY}/${REPOSITORY}:${IMAGE_TAG}"
                    def latestImageID = sh(script: "docker inspect -f '{{.Id}}' ${REGISTRY}/${REPOSITORY}:${IMAGE_TAG}", returnStdout: true).trim()
                    echo "Latest image ID: ${latestImageID}"

                    // Check if the ImageIDs are different
                    if (currentImageID != latestImageID) {
                        env.NEW_IMAGE_AVAILABLE = 'true'
                        echo "New image available, proceeding with deployment."
                    } else {
                        env.NEW_IMAGE_AVAILABLE = 'false'
                        echo "No new image available, skipping deployment."
                    }
                }
            }
        }
        stage('Deploy') {
            when {
                expression {
                    return params.skip_checks || env.NEW_IMAGE_AVAILABLE == 'true'
                }
            }
            steps {
                script {
                    if (params.DEPLOY_TYPE == 'docker') {
                        // Ensure the correct image tag is used in the docker-compose.yml
                        sh '''
                        sed -i "s|image: .*|image: ${REGISTRY}/${REPOSITORY}:${IMAGE_TAG}|" docker-compose.yml
                        '''
                        // Deploy using Docker Compose
                        sh 'docker-compose down'
                        sh 'docker-compose up -d'

                        // Wait for a few seconds to let the app start
                        sleep 10

                        // Verify the container is running
                        def containerRunning = sh(script: "docker ps -q -f name=great_chat", returnStdout: true).trim()
                        if (!containerRunning) {
                            error "Container great_chat is not running"
                        } else {
                            echo "Container great_chat is running"
                            // Fetch and display the logs to see startup output
                            sh "docker logs great_chat"
                        }
                    } else if (params.DEPLOY_TYPE == 'kubernetes') {
                        // Kubernetes deployment steps remain unchanged
                        // Your existing Kubernetes deployment logic
                    }
                }
            }
        }
    }
    post {
        success {
            script {
                // Notification logic for success status
            }
        }
        failure {
            script {
                // Notification logic for failure status
            }
        }
    }
}