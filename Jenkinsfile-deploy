pipeline {
    agent any
    parameters {
        booleanParam(name: 'skip_checks', defaultValue: false, description: 'Skip the Check for Changes stage')
        choice(name: 'DEPLOY_TYPE', choices: ['docker', 'kubernetes'], description: 'Select deployment type', defaultValue: 'kubernetes')
    }
    environment {
        REGISTRY = "harbor.arpansahu.me"
        REPOSITORY = "library/great_chat"
        IMAGE_TAG = "${env.BUILD_ID}"
        COMMIT_FILE = "${env.WORKSPACE}/last_commit.txt"
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Check for Changes') {
            when {
                expression { return !params.skip_checks }
            }
            steps {
                script {
                    def currentCommit = sh(script: "git rev-parse HEAD", returnStdout: true).trim()
                    echo "Current commit: ${currentCommit}"

                    if (fileExists(COMMIT_FILE)) {
                        def lastCommit = readFile(COMMIT_FILE).trim()
                        echo "Last commit: ${lastCommit}"

                        if (currentCommit == lastCommit) {
                            echo "No changes detected. Skipping build."
                            currentBuild.result = 'NOT_BUILT'
                            error("No changes detected. Skipping build.")
                        } else {
                            def changes = sh(script: "git diff --name-only ${lastCommit} ${currentCommit}", returnStdout: true).trim().split("\n")
                            def relevantChanges = changes.findAll { 
                                !(it in ['README.md', 'SECURITY.md', 'CHANGELOG.md', '.github/dependabot.yml'])
                            }
                            
                            if (relevantChanges.isEmpty()) {
                                echo "No relevant changes detected. Skipping build."
                                currentBuild.result = 'NOT_BUILT'
                                error("No relevant changes detected. Skipping build.")
                            } else {
                                echo "Relevant changes detected. Proceeding with build."
                            }
                        }
                    } else {
                        echo "No last commit file found. Proceeding with initial build."
                    }

                    writeFile(file: COMMIT_FILE, text: currentCommit)
                }
            }
        }
        stage('Dependencies') {
            when {
                not {
                    equals expected: 'NOT_BUILT', actual: currentBuild.result
                }
            }
            steps {
                script {
                    sh "sudo cp /root/projectenvs/great_chat/.env ${env.WORKSPACE}/"
                }
            }
        }
        stage('Build Image') {
            when {
                not {
                    equals expected: 'NOT_BUILT', actual: currentBuild.result
                }
            }
            steps {
                script {
                    sh 'docker --version'
                    echo "Building Docker image: ${REGISTRY}/${REPOSITORY}:${IMAGE_TAG}"
                    sh """
                    docker build -t ${REGISTRY}/${REPOSITORY}:${IMAGE_TAG} .
                    docker tag ${REGISTRY}/${REPOSITORY}:${IMAGE_TAG} ${REGISTRY}/${REPOSITORY}:latest
                    """
                }
            }
        }
        stage('Push Image') {
            when {
                not {
                    equals expected: 'NOT_BUILT', actual: currentBuild.result
                }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'harbor-credentials', passwordVariable: 'DOCKER_REGISTRY_PASSWORD', usernameVariable: 'DOCKER_REGISTRY_USERNAME')]) {
                    script {
                        sh '''
                        echo $DOCKER_REGISTRY_PASSWORD | docker login ${REGISTRY} -u $DOCKER_REGISTRY_USERNAME --password-stdin
                        '''
                        sh '''
                        docker push ${REGISTRY}/${REPOSITORY}:${IMAGE_TAG}
                        docker push ${REGISTRY}/${REPOSITORY}:latest
                        '''
                    }
                }
            }
        }
        stage('Deploy') {
            when {
                not {
                    equals expected: 'NOT_BUILT', actual: currentBuild.result
                }
            }
            steps {
                script {
                    if (params.DEPLOY_TYPE == 'kubernetes') {
                        echo "Deploying to Kubernetes"
                        sh """
                        kubectl create secret generic great-chat-secret --from-env-file=/root/projectenvs/great_chat/.env
                        kubectl apply -f deployment.yaml
                        kubectl apply -f service.yaml
                        """
                    } else if (params.DEPLOY_TYPE == 'docker') {
                        echo "Deploying with Docker"
                        // Add your Docker deployment steps here
                    } else {
                        echo "No deployment type selected. Defaulting to Kubernetes"
                        sh """
                        kubectl create secret generic great-chat-secret --from-env-file=/root/projectenvs/great_chat/.env
                        kubectl apply -f deployment.yaml
                        kubectl apply -f service.yaml
                        """
                    }
                }
            }
        }
    }
    post {
        success {
            script {
                currentBuild.description = "Image: ${REGISTRY}/${REPOSITORY}:${IMAGE_TAG}"
                sh """curl -s \
                -X POST \
                --user $MAIL_JET_API_KEY:$MAIL_JET_API_SECRET \
                https://api.mailjet.com/v3.1/send \
                -H "Content-Type:application/json" \
                -d '{
                    "Messages":[
                            {
                                    "From": {
                                            "Email": "$MAIL_JET_EMAIL_ADDRESS",
                                            "Name": "ArpanSahuOne Jenkins Notification"
                                    },
                                    "To": [
                                            {
                                                    "Email": "$MY_EMAIL_ADDRESS",
                                                    "Name": "Development Team"
                                            }
                                    ],
                                    "Subject": "${currentBuild.fullDisplayName} built successfully",
                                    "TextPart": "Hola Development Team, your project ${currentBuild.fullDisplayName} is now built and pushed to the registry",
                                    "HTMLPart": "<h3>Hola Development Team, your project ${currentBuild.fullDisplayName} is now built and pushed to the registry </h3> <br> <p> Build Url: ${env.BUILD_URL}  </p>"
                            }
                    ]
                }'"""
                build job: 'great_chat', wait: false
            }
        }
        failure {
            script {
                sh """curl -s \
                -X POST \
                --user $MAIL_JET_API_KEY:$MAIL_JET_API_SECRET \
                https://api.mailjet.com/v3.1/send \
                -H "Content-Type:application/json" \
                -d '{
                    "Messages":[
                            {
                                    "From": {
                                            "Email": "$MAIL_JET_EMAIL_ADDRESS",
                                            "Name": "ArpanSahuOne Jenkins Notification"
                                    },
                                    "To": [
                                            {
                                                    "Email": "$MY_EMAIL_ADDRESS",
                                                    "Name": "Development Team"
                                            }
                                    ],
                                    "Subject": "${currentBuild.fullDisplayName} build failed",
                                    "TextPart": "Hola Development Team, your project ${currentBuild.fullDisplayName} build failed",
                                    "HTMLPart": "<h3>Hola Development Team, your project ${currentBuild.fullDisplayName} build failed </h3> <br> <p> Build Url: ${env.BUILD_URL}  </p>"
                            }
                    ]
                }'"""
            }
        }
    }
}